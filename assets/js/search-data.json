{
  
    
        "post0": {
            "title": "Test Corrections Trimester 1",
            "content": "2014 Practice Exam MCQ Test Corrections . Question 3: Original Answer: E. A method that is made private means that other classes will not be able to call it. | Correct Answer: B. An accessor method lets other objects access the value of instance variables without actually changing them. The accessor method should be public. | . | Question 8: Original Answer: B. Choice II is not the only program that will compile without error. | Correct Answer C. Choice I successfully create a new object Student and assigns it to variable a of type Student using a no parameter constructor. Choice II uses a two-parameter constuctor with parameters String and int in order to successfully a create a new object Student and assign it to variable b of type Student. | . | Question 17: Original Answer: B. Since the size of the given array is immutable, when the program is run, no values are actually removed from the array. | Correct Answer: C. In the first iteration of the program, arr[3] is assigned the value[4]. In each iteration, the current value corresponding to the current index is copied to the element to the left. | . | Question 18: Original Answer: C. The statement given will result in an error, since the indices for myList range from 0 to myList.size() - 1, not 1 to myList.size(). | Correct Answer: B. The indices for myList range from 0 to myList.size() - 1, and since Math.random() randomly generates a random float point number between 0 and 1, excluding 1, this range will be satisfied. With the int type cast, an integer index value between 0 and myList.size() - 1, inclusive, will be generated. | . | Question 19: Original Answer: E. The opposite of !(a != b) is (a != b), due to the precense of a logic operator. With De Morgan’s Law, the logic operator &amp;&amp; becomes |   | and vice versa. The opposite of (b &gt; 7) is (b &lt;= 7). | . | Correct Answer: B. De Morgan’s Law states that !(a &amp;&amp; b) is equal to !a |   | !b. After negating the first expression, we get (!(a != b)) |   | !(b &gt; 7). After negative the second expression, we get (a != b) |   | (b &lt;= 7). | . | . | Question 22: Original Answer: C. Objects of a subclass inherit the methods of the super class. This means that the AudioBook object can call the toString method from the Book class. | Correct Answer: B. Because the books array has been declared of type Book, all objects saved in books are consided the Book object regardless of their actual type. As such, any methods that are called on elements of books must be declared Book. This means that in order to call the pagesPerMinute() method on Book[0], we need to use typecasting to allow the compiler to know that the object saved in the books array at this index is actually an AudioBook object. | . | Question 23: Original Answer: D. This would’ve been the result if the loop condition was k &gt; 1 instead of k &gt; 0. In other words, this would’ve been the output if the loop incremented one less. | Correct Answer: B. The loop basically looks at the element of the array at a specific index, checking if it starts with “b”. If it does, then it is inserted near beginning of the array. | . | Question 28: Original Answer: B. If the value of n is 2 or less in the original call of the method mystery, then the loop will be skipped and x will be 1 at //Point C. | Correct Answer: E. The while loop implemented only interates while n is greater than 2, and //Point B is in the body of the while loop prior to any change in the value n. During this time, n will always be greater than 2. | . | Question 30: Original Answer: B. This would’ve been the result if the first substring call was word.substring(howFar, word.length()). | Correct Answer: C. The substring method basically returns a substring beginning at the first parameter and ending at the second parameter - 1. The result of word.substring(howFar + 1, word.length()) is “iler”. The result of word.substring(0, howFar) is “com”. All in all, the method will return “ilercom”. | . | Question 33: Original Answer: C. This would be the correct answer if the boolean condition was changed from |   | to &amp;&amp;. However, since k is never incremented, |   | will always be true since k will always be less than 4. | . | Correct Answer: E. Since k is never changed in the body of the while loop, it will always have a value 1 and thus less than 4. This means the boolean expression |   | for the while loop will always evaluate to true, and therefore lead to an infinite loop. | . | . | Question 34: Original Answer: D. Choice III uses the default constructor Point to assign center to a new Point with x and y both equal to 0. However, it attempts to update x and y, which are both private instance variables in Point, leading to a compile time error since x and y are not able to be accessed directly in the class Circle. | Correct Answer: B. Choice II successfully creates a new Point with x assigned to value b and y assigned to value b using the two-parameter Point constructor. | . | Question 39: Original Answer: E. Although the return value of recur(9) is 18, this call is made within another recursive call, which means that it is not the true final return value. | Correct Answer: D. The inital call recur(27) has a return value of recur(recur(9)). The inner call recur(9) returns 18, which means the outer call becomes recur(18). The call recur(18) returns recur(recur(6)). The inner call recur(6) returns 12, which means the outer call becomes recur(12). The call recur(12) returns recur(recur(4)). The inner call recur(4) returns 8, which means the outer call becomes recur(8). The call recur(8) returns 16, which is the final return value of the initial call recur(27). | . | Question 40: Original Answer: A. This would’ve been the result if System.out.println(temp); was before the recursive call to whatsItDo(temp); When the recursive call is executed, the current sequence of statements are paused. | Correct Answer: C. The call whatsItDo(“WATCH”) first assigns a substring of “WATCH” starting at 0 and ending at 3, which is “WATC”, to the local variable temp. The next call sets local temp to “WAT”, the call after that sets local temp to “WA”, and so on. The call whatsItDo(“W”) reaches the base case. The call becomes whatsItDo(“WA”), which prints out the value of its local variable temp, which is “W”. The next call becomes whatsItDo(“WAT”), which prints out “WA”, the call after that beomces whatsItDo(“WATC”), which prints out “WAT”, and the final call whatsItDo(“WATCH”) prints out “WATC”. After this call, all of the recursive calls in the program are complete. | . | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/11/08/Test-Corrections-Trimester-1.html",
            "relUrl": "/2022/11/08/Test-Corrections-Trimester-1.html",
            "date": " • Nov 8, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Arrays HW Post",
            "content": "HW: . Swap the first and last element in the array | Replace all even elements with 0 | . import java.util.Arrays; public class ArrayMethods { // Initialized array with private modifiers private int[] values = {1, 4, 3, 5, 6, 8, 7}; // Swap method for reversing the entire array public int[] swap() { int[] valuesSwap = values.clone(); for (int i = 0; i &lt; valuesSwap.length/2; i++) { // Store the ith value of the array in a temp variable int temp = valuesSwap[i]; int lastIndex = valuesSwap.length - (i + 1); valuesSwap[i] = valuesSwap[lastIndex]; valuesSwap[lastIndex] = temp; } return valuesSwap; } // Replace method for replacing all even numbers in the array with 0 public int[] replace() { int[] valuesReplace = values.clone(); for (int a = 0; a &lt; valuesReplace.length; a++) { // If % produces a remainder of 0, the element is even if (valuesReplace[a] % 2 == 0) { valuesReplace[a] = 0; } } return valuesReplace; } // Running method for visualizing outputs public static void main(String[] args) { ArrayMethods myObj = new ArrayMethods(); for (int num : myObj.swap()) { System.out.print(num + &quot; &quot;); } System.out.println(&quot;&quot;); for (int num : myObj.replace()) { System.out.print(num + &quot; &quot;); } } } ArrayMethods.main(null); . 7 8 6 5 3 4 1 1 0 3 5 0 0 7 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/28/Arrays-HW.html",
            "relUrl": "/jupyter/2022/10/28/Arrays-HW.html",
            "date": " • Oct 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Writing Classes HW Post",
            "content": "2021 FRQ 1a . public class WordMatch { private String secret; // Constructor for WordMatch that initializes the secret variable public WordMatch(String word) { secret = word; } // Method for comparing guess with secret public int scoreGuess(String guess) { int score = 0; int occurrences = 0; int guessLength = guess.length(); // The for loop&#39;s condition changes with respect to the length of guess, and counts the number of occurrences of guess in secret for (int i = 0; i &lt;= secret.length() - guessLength; i++) { String secretComponent = secret.substring(i, i + guessLength); if (guess.equals(secretComponent)) { occurrences++; } } score = occurrences * (int) Math.pow(guessLength, 2); return score; } // Running method for visualizing outputs public static void main(String[] args) { WordMatch myObj = new WordMatch(&quot;mississippi&quot;); System.out.println(myObj.scoreGuess(&quot;i&quot;)); } } WordMatch.main(null); . 4 . 2021 FRQ 3a . public class MemberInfo { public String memberName; public int memberGradYear; public boolean memberGoodStanding; // Constructor that initializes detail variables for a member public MemberInfo(String name, int gradYear, boolean hasGoodStanding) { memberName = name; memberGradYear = gradYear; memberGoodStanding = hasGoodStanding; } // Returns graduation year of a member public int getGradYear() { return memberGradYear; } // Returns the good standing status of a member public boolean inGoodStanding() { return memberGoodStanding; } } public class ClubMembers { // memberList ArrayList private ArrayList&lt;MemberInfo&gt; memberList; public void addMembers(String[] names, int gradYear) { // memberList is initialized memberList = new ArrayList&lt;MemberInfo&gt;(); // for loop adds all specified new member objects to MemberList for (int i = 0; i &lt; names.length; i++) { // Alternate method: Create a memberInfo object first then append it to memberList // MemberInfo memberObject = new MemberInfo(names[i], gradYear, true); memberList.add(new MemberInfo(names[i], gradYear, true)); } } // Running method for visualizing outputs public static void main(String[] args) { ClubMembers myObj = new ClubMembers(); String[] names = {&quot;Dylan&quot;, &quot;Ritvik&quot;, &quot;Aryan&quot;}; myObj.addMembers(names, 2023); // for loop retrieves all member objects from MemberList, then retrieves memberName, memberGradYear, and memberGoodStanding from each member object and prints them for (int i = 0; i &lt; myObj.memberList.size(); i++) { String memberNameRetrieve = myObj.memberList.get(i).memberName; int memberGradYearRetrieve = myObj.memberList.get(i).memberGradYear; boolean memberGoodStanding = myObj.memberList.get(i).memberGoodStanding; System.out.println(memberNameRetrieve + &quot;; &quot; + memberGradYearRetrieve + &quot;; &quot; + memberGoodStanding); } } } ClubMembers.main(null); . Dylan; 2023; true Ritvik; 2023; true Aryan; 2023; true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/27/Classes-HW.html",
            "relUrl": "/jupyter/2022/10/27/Classes-HW.html",
            "date": " • Oct 27, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Boolean Expressions and If Else Statements Post",
            "content": "2009 FRQ 3b . public class BatteryCharger { // Initialized array containing the costs at each hour (0 - 23) private int[] rateTable = {50, 60, 160, 60, 80, 100, 100, 120, 150, 150, 150, 200, 40, 240, 220, 220, 200, 200, 180, 180, 140, 100, 80, 60}; // Method for determining the total charge cost based on the given startHour and chargeTime private int getChargingCost(int startHour, int chargeTime) { int totalCost = 0; for (int i = startHour; i &lt; startHour + chargeTime; i++) { if (i &gt;= 24) { int temp = i % 24; totalCost += rateTable[temp]; } else { totalCost += rateTable[i]; } } return totalCost; } // Method for determining the most cost efficient startHour based on the given chargeTime public int getChargeStartTime(int chargeTime) { int optimalStartHour = 23; for (int i = 22; i &gt;= 0; i--) { if (getChargingCost(i, chargeTime) &lt; getChargingCost(optimalStartHour, chargeTime)) { optimalStartHour = i; } } return optimalStartHour; } // Running method for visualizing outputs public static void main(String[] args) { BatteryCharger myObj = new BatteryCharger(); System.out.println(myObj.getChargingCost(22, 30)); System.out.println(myObj.getChargeStartTime(30)); } } BatteryCharger.main(null); . 3710 23 . 2017 FRQ 1b . public class Digits { private ArrayList&lt;Integer&gt; digitList; // Constructor that adds all digits of an integer to an ArrayList public Digits(int num) { Integer number = num; digitList = new ArrayList&lt;Integer&gt;(); String numberNew = number.toString(); for (int i = 0; i &lt; numberNew.length(); i++) { int numberNewDigit = Character.getNumericValue(numberNew.charAt(i)); digitList.add(numberNewDigit); } } // Method for checking if all the numbers in the digit list are strictly increasing public boolean isStrictlyIncreasing() { // Returns true if there is only 1 digit if (digitList.size() &lt; 2) { return true; } for (int a = 0; a &lt; digitList.size() - 1; a++) { // Returns false if at least one of the digits does not follow the strictly increasing rule if (digitList.get(a) &gt;= digitList.get(a + 1)) { return false; } } return true; } // Running method for visualizing outputs public static void main(String[] args) { Digits myObj = new Digits(1234578); System.out.println(myObj.isStrictlyIncreasing()); } } Digits.main(null); . true 1 2 3 4 5 7 8 . 2019 FRQ 3b . public class Delimiters { private String openDel; private String closeDel; ArrayList&lt;String&gt; delimitersList; // Constructor that initializes openDel, closeDel, and delimitersList public Delimiters(String open, String close) { openDel = open; closeDel = close; delimitersList = new ArrayList&lt;String&gt;(); } // Method for collecting all delimiters from a text public ArrayList&lt;String&gt; getDelimitersList (String[] tokens) { for (String token : tokens) { if (token == openDel || token == closeDel) { delimitersList.add(token); } } return delimitersList; } // Method to check whether or not the open delimiters and close delimiters are balanced. public boolean isBalanced(ArrayList&lt;String&gt; delimiters) { // Counters for the number of open delimiters and close delimiters int openCount = 0; int closeCount = 0; for (String delimiter : delimiters) { if (delimiter == openDel) { openCount++; } else if (delimiter == closeDel) { closeCount++; } // First condition is broken if (openCount &lt; closeCount) { return false; } } // First and second condition are both met if (openCount == closeCount) { return true; } // Second condition is broken else { return false; } } // Running method for visualizing outputs public static void main(String[] args) { Delimiters myObj = new Delimiters(&quot;&lt;sup&gt;&quot;, &quot;&lt;/sup&gt;&quot;); String[] tokens = {&quot;&lt;sup&gt;&quot;, &quot;yy&quot;, &quot;&lt;sup&gt;&quot;, &quot;zz&quot;, &quot;&lt;/sup&gt;&quot;, &quot;&lt;/sup&gt;&quot;}; ArrayList&lt;String&gt; delimiters = myObj.getDelimitersList(tokens); System.out.println(delimiters); System.out.println(myObj.isBalanced(delimiters)); } } Delimiters.main(null); . [&lt;sup&gt;, &lt;sup&gt;, &lt;/sup&gt;, &lt;/sup&gt;] true .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/26/Conditional-HW.html",
            "relUrl": "/jupyter/2022/10/26/Conditional-HW.html",
            "date": " • Oct 26, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Using Objects HW Post",
            "content": "// Class for initializing values for each Goblin trait public class Goblin { // Initialize all trait variables private String name; private int HP; private int DMG; private double hitChance; // Get methods for each trait value public String getName() { return name; } public int getHP() { return HP; } public int getDMG() { return DMG; } public double getHitChance() { return hitChance; } public boolean isAlive() { if (this.HP &gt; 0) { return true; } else { return false; } } // Set methods for each trait value public void setName(String newName) { this.name = newName; } public void setHP(int newHP) { this.HP = newHP; } public void takeDMG(int takenDamage) { this.HP -= takenDamage; } public void setDMG(int newDMG) { this.DMG = newDMG; } public void setHitChance(double newHitChance) { this.hitChance = newHitChance; } } . // Math import for randomization import java.lang.Math; // Class that simulates the outcome of fights between 2 goblins public class Duel { // Method that simulates each goblin&#39;s attack. Every attack either leads to a miss or some amount damage to a goblin. public static void attack(Goblin attackerGoblin, Goblin attackeeGoblin) { System.out.println(attackerGoblin.getName() + &quot; attacks &quot; + attackeeGoblin.getName() + &quot;!&quot;); if (Math.random() &lt; attackerGoblin.getHitChance()) { attackeeGoblin.takeDMG(attackerGoblin.getDMG()); System.out.println(attackerGoblin.getName() + &quot; hits!&quot;); System.out.println(attackeeGoblin.getName() + &quot; takes &quot; + attackerGoblin.getDMG() + &quot; damage&quot;); } else { System.out.println(attackerGoblin.getName() + &quot; misses...&quot;); } System.out.println(attackeeGoblin.getName() + &quot; HP: &quot; + attackeeGoblin.getHP()); System.out.println(); } // Start up method that runs as long as both goblins are alive public static void fight(Goblin goblin1, Goblin goblin2) { while (goblin1.isAlive() &amp;&amp; goblin2.isAlive()) { attack(goblin1, goblin2); if (!goblin1.isAlive()) { System.out.println(goblin1.getName() + &quot; has perished&quot;); break; } attack(goblin2, goblin1); if (!goblin2.isAlive()) { System.out.println(goblin2.getName() + &quot; has perished&quot;); break; } } } public static void main(String[] args) { Goblin goblin1 = new Goblin(); goblin1.setName(&quot;Satoru Gojo&quot;); goblin1.setHP(10); goblin1.setDMG(3); goblin1.setHitChance(0.85); Goblin goblin2 = new Goblin(); goblin2.setName(&quot;Toji Fushiguro&quot;); goblin2.setHP(12); goblin2.setDMG(2); goblin2.setHitChance(0.75); fight(goblin1, goblin2); } } Duel.main(null); . Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 9 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 8 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 6 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 3 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro misses... Satoru Gojo HP: 6 Satoru Gojo attacks Toji Fushiguro! Satoru Gojo hits! Toji Fushiguro takes 3 damage Toji Fushiguro HP: 0 Toji Fushiguro attacks Satoru Gojo! Toji Fushiguro hits! Satoru Gojo takes 2 damage Satoru Gojo HP: 4 Toji Fushiguro has perished .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Objects-HW.html",
            "relUrl": "/jupyter/2022/10/25/Objects-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Iteration HW Post",
            "content": "Part #1: Write a program where a random number is generated. Then the user tries to guess the number. If they guess too high display something to let them know, and same for if they guess a number that is too low. The loop must iterate until the number is guessed correctly. . // Java utility imports necessary for the program import java.util.Scanner; import java.util.Random; public class Iteration { // Initialize Random library object Random randNumber = new Random(); int randomNumber = randNumber.nextInt(100 - 1) + 1; // Initialize Scanner object Scanner userInput = new Scanner(System.in); // Startup method public void play() { System.out.println(&quot;Guess an integer from 1 to 100&quot;); int guess = userInput.nextInt(); System.out.println(guess); // Calls checkGuess method that checks if the guess matches the randomly generated number from 1-100 checkGuess(guess); } // Simulates binary search random number guessing game. This essentially a recursive method that keeps running until the randomly generated number is guessed correctly public void checkGuess(int guess) { // Win condition if (guess == randomNumber) { System.out.println(&quot;Congratulations, you guessed correctly!&quot;); } // Condition when guess is less than randomNumber else if (guess &lt; randomNumber) { System.out.println(&quot;Too low&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } // Condition when guess is greater than randomNumber else if (guess &gt; randomNumber) { System.out.println(&quot;Too high&quot;); System.out.println(&quot;Guess again&quot;); int guess2 = userInput.nextInt(); System.out.println(guess2); checkGuess(guess2); } } } // Running method for visualizing outputs public class runProgram { public static void main(String[] args) { Iteration myObj = new Iteration(); myObj.play(); } } runProgram.main(null); . Guess an integer from 1 to 100 50 Too high Guess again 25 Too low Guess again 37 Congratulations, you guessed correctly! . Part #2: .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/25/Iteration-HW.html",
            "relUrl": "/jupyter/2022/10/25/Iteration-HW.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Primitives Types HW Post",
            "content": "2006 FRQ 2a . public interface Item { double purchasePrice(); } // Class TaxableItem implements the interface Item, which contains the method purchasePrice() public abstract class TaxableItem implements Item { private double taxRate; public abstract double getListPrice(); // Constructor for initializing the tax rate, if there is any public TaxableItem(double rate){ taxRate = rate; } // Calculates the purchase price of an item by multiplying the tax rate by the list price, then adding that to the original list price // If there is no tax rate, then the purchase price is simply equal to the list price public double purchasePrice() { double purchasePriceValue = getListPrice() + (taxRate * getListPrice()); return purchasePriceValue; // Alternate way: // return getListPrice() * (1.0 + taxRate); } } // Since we are working with an abstract class, we would have to extend to it with another class in order to run our program // As of right now, the class hierarchy seems to be very complicated, so I will further research ways to output the program results . 2006 FRQ 3a . public class Customer { private String cName; private int cID; // Constructor to initialize customer name and id public Customer(String name, int idNum) { cName = name; cID = idNum; } // Gets the name of the specified customer public String getName() { return cName; } // Gets the unique ID of the specified customer public int getID() { return cID; } // Compares given customer with another customer. Returns a positive integer if the customer is greater than the other customer, // 0 if they are equal, and a negative integer if the customer is less than the other customer. public int compareCustomer(Customer other) { int nameComparison = getName().compareTo(other.getName()); if (nameComparison != 0) { return nameComparison; } else { if (getID() != other.getID()) { return getID() - other.getID(); } } return 0; } // Running method for visualizing outputs public static void main(String[] args) { Customer c1 = new Customer(&quot;Smith&quot;, 1001); Customer c2 = new Customer(&quot;Anderson&quot;, 1002); Customer c3 = new Customer(&quot;Smith&quot;, 1003); Customer c4 = new Customer(&quot;Will&quot;, 1004); System.out.println(c1.compareCustomer(c4)); } } Customer.main(null); . -4 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/24/Primitive-Types-HW.html",
            "relUrl": "/jupyter/2022/10/24/Primitive-Types-HW.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "POJO Post",
            "content": "import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class Jokes { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String joke; // The Joke private int haha; // Store joke likes private int boohoo; // Store joke jeers } . | import lombok.AllArgsConstructor; package lombok does not exist .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/10/03/POJO.html",
            "relUrl": "/jupyter/2022/10/03/POJO.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Arrays and Images Post",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;gojo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; private final String outDir = &quot;images/tmp/&quot;; private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; private long bytes; private int width; private int height; public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } public static BufferedImage convertToBufferedImage(Image img) { BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { img = ImageIO.read(new File(this.inFile)); resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; this.setStats(); } public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i &lt; img.getHeight(); i+=6) { for (int j = 0; j &lt; img.getWidth(); j+=3) { Color col = new Color(img.getRGB(j, i)); double pixVal = (((col.getRed() * 0.30) + (col.getBlue() * 0.59) + (col .getGreen() * 0.11))); try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } public void GrayScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red+green+blue)/3; Color colorGray = new Color(avg, avg, avg); img.setRGB(j, i, colorGray.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;graygojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void GreenScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (green)/3; Color colorGreen = new Color(avg, green, avg); img.setRGB(j, i, colorGreen.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greengojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void RedScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (red)/3; Color colorRed = new Color(red, avg, avg); img.setRGB(j, i, colorRed.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void BlueScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;bluegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void PurpleScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, avg, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;purplegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void CyanScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(avg, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;cyangojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void YellowScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, avg); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;yellowgojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public void WhiteScale() { BufferedImage img = null; try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { int pixel = img.getRGB(j, i); Color color = new Color(pixel, true); int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); int avg = (blue)/3; Color colorBlue = new Color(red, green, blue); img.setRGB(j, i, colorBlue.getRGB()); } } try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;whitegojo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } public static void main(String[] args) throws IOException { Pics gojo = new Pics(&quot;gojo&quot;, &quot;png&quot;); gojo.GrayScale(); gojo.GreenScale(); gojo.RedScale(); gojo.BlueScale(); gojo.PurpleScale(); gojo.CyanScale(); gojo.YellowScale(); gojo.WhiteScale(); gojo.printStats(&quot;Original&quot;); gojo.resize(33); gojo.printStats(&quot;Scaled&quot;); gojo.convertToAscii(); } } Pics.main(null); . Original: 78183 1200x628 images/gojo.png . java.lang.NoClassDefFoundError: Could not initialize class sun.awt.X11.XToolkit at java.base/java.lang.Class.forName0(Native Method) at java.base/java.lang.Class.forName(Class.java:315) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:588) at java.desktop/java.awt.Toolkit$2.run(Toolkit.java:583) at java.base/java.security.AccessController.doPrivileged(Native Method) at java.desktop/java.awt.Toolkit.getDefaultToolkit(Toolkit.java:582) at java.desktop/java.awt.Image.getScaledInstance(Image.java:178) at Pics.resize(#32:1) at Pics.main(#32:1) at .(#35:1) .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/27/Arrays-and-Images.html",
            "relUrl": "/jupyter/2022/09/27/Arrays-and-Images.html",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fibonacci Post",
            "content": "import java.util.Scanner; import java.util.Arrays; import java.lang.System; public class Fibonacci { public void checkNthPosition() { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter an integer for n to get the nth integer of the Fibonacci Sequence:&quot;); int n = userInput.nextInt(); forLoop(n); whileLoop(n); long timeStartRecursion = System.nanoTime(); recursion(n); double timeElapsedRecursion = (double) (System.nanoTime() - timeStartRecursion)/ (double) (1000); System.out.println(&quot;Using a recursion loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsedRecursion); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + recursion(n)); } public int forLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); for (int i = 2; i &lt;= n; i++) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a for loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int whileLoop(int n) { long timeStart = System.nanoTime(); int[] fiboArray = new int[]{0, 1}; if (n == 0) { fiboArray = Arrays.copyOf(fiboArray, fiboArray.length - 1); } else if (n == 1) { fiboArray = fiboArray; } else if (n &gt; 1) { fiboArray = Arrays.copyOf(fiboArray, n + 1); int i = 2; while (i &lt;= n) { fiboArray[i] = fiboArray[i - 2] + fiboArray[i - 1]; i++; } } double timeElapsed = (double) (System.nanoTime() - timeStart)/ (double) (1000); String fiboArrayPrint = Arrays.toString(fiboArray); System.out.println(&quot;Using a while loop:&quot;); System.out.println(&quot;Computational Time (In Microseconds): &quot; + timeElapsed); System.out.println(&quot;Fibonacci array with n integers: &quot; + fiboArrayPrint); System.out.println(&quot;The nth integer of the Fibonacci sequence: &quot; + fiboArray[n]); return fiboArray[n]; } public int recursion(int n) { if (n == 0) { return 0; } else if (n == 1) { return 1; } return recursion(n-2) + recursion(n-1); } } public class Fibo extends Fibonacci { public static void main(String[] args) { Fibonacci play = new Fibonacci(); play.checkNthPosition(); } } Fibo.main(null); . Enter an integer for n to get the nth integer of the Fibonacci Sequence: Using a for loop: Computational Time (In Microseconds): 7.409 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a while loop: Computational Time (In Microseconds): 4.479 Fibonacci array with n integers: [0, 1, 1, 2, 3, 5, 8, 13] The nth integer of the Fibonacci sequence: 13 Using a recursion loop: Computational Time (In Microseconds): 13.698 The nth integer of the Fibonacci sequence: 13 . Questions . Skill 1.B: Determine code that would be used to complete code segments (i.e. For, While, Recursion). | To complete the code segments, I used loop statements such as for, while, and recursion. | . Skill 4.C: Determine if two or more code segments yield equivalent results (Be sure to discuss how you know the results are the same). | All code segments yield the same results, because although they are different kinds of statements, they essentially use the same operations and ultimately return the same result. | . Skill 5.A: Describe the behavior of a given segment of program code (Describe the different in recursion versus for and while loops; perhaps add timing to determine speed). | Using the timeStart and timeElapsed variables to determine the computational time of each program code, I found out the the recursion loop takes slightly longer than the for and while loops. This is likely because it has to calculate a lot of the values due to the multiple return statements it has. The for and whiles loops likely took less time because their caching methods (Appending values to and iterating through arrays) are faster. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/24/Fibonacci.html",
            "relUrl": "/jupyter/2022/09/24/Fibonacci.html",
            "date": " • Sep 24, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "CSA FRQ",
            "content": "import java.util.Scanner; import java.util.Arrays; public class Level { int level; String levelStatus; public boolean goalReached() { if (levelStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getPoints() { if (level == 1 &amp;&amp; goalReached() == true) { return 200; } else if (level == 2 &amp;&amp; goalReached() == true) { return 100; } else if (level == 3 &amp;&amp; goalReached() == true) { return 500; } return 0; } } public class Game { private Level levelOne = new Level(); private Level levelTwo = new Level(); private Level levelThree = new Level(); //Default constructor created // public Game() { } String bonusStatus; public void play() { System.out.println(&quot;Game Simulation&quot;); Scanner numInput = new Scanner(System.in); System.out.println(&quot;How many times are you playing the game?&quot;); int num = numInput.nextInt(); playManyTimes(num); } public boolean isBonus() { if (bonusStatus.equals(&quot;y&quot;)) { return true; } else { return false; } } public int getScore() { int score = 0; if (levelOne.goalReached() == true) { score += levelOne.getPoints(); if (levelTwo.goalReached() == true) { score += levelTwo.getPoints(); if (levelThree.goalReached() == true) { score += levelThree.getPoints(); } } } if (isBonus() == true) { score *= 3; } return score; } public int playManyTimes(int num){ Scanner userInput = new Scanner(System.in); int[] scoreArray = new int[]{}; scoreArray = Arrays.copyOf(scoreArray, scoreArray.length + num); for (int w = 0; w &lt; num; w++) { scoreArray[w] = 0; } for (int i = 0; i &lt; num; i++) { System.out.println(&quot;Did you complete level 1? (y/n)&quot;); levelOne.levelStatus = userInput.nextLine(); levelOne.level = 1; levelOne.goalReached(); System.out.println(&quot;Did you complete level 2? (y/n)&quot;); levelTwo.levelStatus = userInput.nextLine(); levelTwo.level = 2; levelTwo.goalReached(); System.out.println(&quot;Did you complete level 3? (y/n)&quot;); levelThree.levelStatus = userInput.nextLine(); levelThree.level = 3; levelThree.goalReached(); System.out.println(&quot;Is this a bonus game? (y/n)&quot;); bonusStatus = userInput.nextLine(); int individualScore = getScore(); System.out.println(individualScore); scoreArray[i] = individualScore; } int highScore = 0; for (int a = 0; a &lt; scoreArray.length; a++) { if (a == 0) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &gt; scoreArray[a - 1]) { highScore = scoreArray[a]; } else if (a &gt; 0 &amp;&amp; scoreArray[a] &lt; scoreArray[a - 1]) { highScore = scoreArray[a - 1]; } } System.out.println(&quot;Your high score was: &quot; + highScore); return highScore; } } public class testGame { public static void main(String[] args) { Game g = new Game(); g.play(); } } testGame.main(null); . Game Simulation How many times are you playing the game? Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 600 Did you complete level 1? (y/n) Did you complete level 2? (y/n) Did you complete level 3? (y/n) Is this a bonus game? (y/n) 2400 Your high score was: 2400 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/16/FRQ-1.html",
            "relUrl": "/jupyter/2022/09/16/FRQ-1.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Iteration Statements Post",
            "content": "class AnimeLoop { String [][] animeArray; public AnimeLoop() { animeArray = new String[][]{ //Toji { &quot; ,@&amp;@#&quot;, &quot; @@@@@@@@@%&quot;, &quot; @@@#@@&amp;&amp;@&amp;&quot;, &quot; .#@((/((/( /&quot;, &quot; ,@@@@#/(##( .&quot;, &quot; /@@@@@@@@@@@@*&quot;, &quot; @@@@@@@@@@@@@@@@@@&quot;, &quot; (@@@@@@@@@@@@@@@@@@@(&quot;, &quot; #@@@@@@@@@@@@@@@@@@@@@&quot;, &quot; @@@@@@@@@@@@@@@@@@@@@&quot;, &quot; &amp;@@@# @@@@@@@@@@@%%%#@&quot;, &quot;@@%%%% @@@@@@@@@@%&amp;&amp;%#&quot;, &quot; #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#%&quot;, &quot; &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%%&quot;, &quot; *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp;&quot; }, //Megumi 1 { &quot; @@@@@@@&quot;, &quot; @@@@@@@@@/&amp;&quot;, &quot; %@@@@(@@@@@@@@&quot;, &quot; &amp;@@@&amp;@@@@@@@%&quot;, &quot; /@@**.,*.. * #@&quot;, &quot; @@&amp;., , /.(&quot;, &quot; @@@@&amp;@&amp;, .*.@@, .,/&quot;, &quot; ,@****#@@@*%(/@@@@/, .&quot;, &quot;#@@@@@@@@&amp;/(*/*%@@@%,,**, *@&quot;, &quot;@@@@@@@@@@@*(#**(@@@@@, @@@@@@@&quot;, &quot; @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@&quot;, &quot; ,/@@@@*@@#@@@@@%@ ,&quot;, &quot; (#(%@@@@*@@@@@@@&quot;, &quot; (&amp;@@@#%@@*@%**///((# / , *&quot;, &quot; *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,.&quot;, &quot; ***@@@@@@@@@@@@@@@@@@@@ *&quot;, &quot; /*@@@@@@@@@@@@&amp;@@ #&quot;, &quot; .**@@%&amp;@%%@@@@@@@@ *&quot;, &quot; *@@@@@@@@@&amp;@@@@@@% * (&quot;, &quot; @@@@@@@@@@@@@@@@ , *&quot; }, //Megumi 2 { &quot; * @&quot;, &quot; @@*@@&amp;@@(&quot;, &quot; @@@@@@@@@@@@@@@%/&quot;, &quot; @@@@@@@@&amp;@@@@@,&quot;, &quot; /@@@@@@@/&amp;@@@@@@#&quot;, &quot; @@ ., ...*#@&quot;, &quot; . ( (/&quot;, &quot; &amp;@@@@/ ., .*/&quot;, &quot; @@@@@@@@@ .@&quot;, &quot; @@@@@&amp;@@&amp;@@#@@@@&quot;, &quot; .@&amp;##%@%@@@@@@@@@&quot;, &quot;(&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@&quot;, &quot;@%(##%@@@@@@@&amp;&amp;@@@@@&quot;, &quot;@%@@@@@@@&amp;#%%@@@@@@@&quot;, &quot;@%@&amp;@@@@@@@@%@@&amp;%@@@&amp;&quot;, &quot;&amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@&quot;, &quot;&amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@&quot;, &quot;@@&amp;@@@@#@&amp;@@@@@@@@@#@@@&quot;, &quot;@@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@&quot;, &quot;@@%%@@%@@%@@@@@@@%%@@&amp;*(@&quot;, &quot; &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@(&quot;, &quot; @@@&amp;@*. ,@@@@@@@@@&quot;, &quot; @@@@@@@@.. @@@@@@@&quot;, &quot; @@@@@@@@&amp;#. ..@@@@&quot; }, //Megumi 3 { &quot; .@@@@@@@@#*@&quot;, &quot; .@&amp;.@&amp;@@@@@@@@@@&quot;, &quot; %@@@@*@*@@@@,,@@@#&quot;, &quot; #@@@@@@@@@@@@@@@@@@ ( ((&quot;, &quot; @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@&quot;, &quot; ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;((&quot;, &quot; %&amp; . , *(/@@#@@@@@ @@ #((&quot;, &quot; ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .#&quot;, &quot; #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp;&quot;, &quot; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , %&quot;, &quot; #(#@(#((@(@@&amp;@@@@@#@@@(&quot;, &quot;(((%@@#@(@%@@@@@@@@@@@&amp; /, ,&quot;, &quot;(((%%@@@@(@%@@@@@@@@@@ (#@@@@@,&quot;, &quot;((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp;&quot;, &quot; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@*&quot;, &quot; .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@(&quot; }, //Megumi 4 { &quot; (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; *&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ .&quot;, &quot; @@@&amp;&amp;#*%&amp;&amp;&amp;@**&quot;, &quot; %,,.....,,&quot;, &quot; .#*/....,. ..&quot;, &quot; .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,,&quot;, &quot; *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*....&quot;, &quot;&amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,#&quot;, &quot;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;,&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/&quot;, &quot; @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@&quot;, &quot; @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp;&quot;, &quot; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;#&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&quot;, &quot; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp;&quot; }, }; } public void printAnime() { System.out.println(); System.out.println(&quot;Java Iteration Lab&quot;); int animeCount = animeArray.length; for (int i = animeCount; i &gt; 1; i--) { if (animeCount &gt; 2 || animeCount &lt; 2) { System.out.println(&quot;There are &quot; + (i-1) + &quot; Megumi Fushiguros standing around...&quot;); } else if (animeCount == 2) { System.out.println(&quot;There is &quot; + (i-1) + &quot; Megumi Fushiguro standing around...&quot;); } for (int row = 1; row &lt; animeCount; row++) { for (int col = 0; col &lt; animeArray[row].length; col++) { System.out.print(animeArray[row][col] + &quot; &quot;); System.out.println(); } System.out.println(); } System.out.println(&quot;Here comes Toji Fushiguro who is a menace to society&quot;); for (int col = 0; col &lt; animeArray[0].length; col++) { System.out.print(animeArray[0][col] + &quot; &quot;); System.out.println(); } System.out.println(); animeCount -= 1; } System.out.println(&quot;There are no more Megumi Fushiguros standing around&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } public static void main(String[] args) { new AnimeLoop().printAnime(); } } AnimeLoop.main(null); . Java Iteration Lab There are 4 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( (&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; * &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;/ . @@@&amp;&amp;#*%&amp;&amp;&amp;@** %,,.....,, .#*/....,. .. .&amp;&amp;&amp;&amp;&amp;&amp;%##(,..(*,, *&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;*.... &amp;&amp;&amp;%&amp;&amp;@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;...,# #&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;#&amp;&amp;&amp;&amp;&amp;&amp;# %&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;, %&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@&amp;&amp;&amp;&amp;&amp;/ @&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@&amp;&amp;&amp;@ @@&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;&amp;&amp;&amp;&amp; @&amp;&amp;&amp; @@@&amp;@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;&amp;# %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; %&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;%&amp;&amp;@&amp; Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 3 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ .@@@@@@@@#*@ .@&amp;.@&amp;@@@@@@@@@@ %@@@@*@*@@@@,,@@@# #@@@@@@@@@@@@@@@@@@ ( (( @@@,#.#@&amp;&amp;@&amp;&amp;@@@@@@&amp;%(#(&amp;((@%@ ,&amp;., *,./#%.*#&amp;&amp;(&amp;@@%/*@@&amp;(( %&amp; . , *(/@@#@@@@@ @@ #(( ((@@%%,&amp; &amp;#/@@@@#(@@ * *** .# #&amp;@#@#/. ( *,,(,%(,.// , ,@@&amp; &amp;%@@@&amp;@@@@@@@@@@((@(/&amp; . / , % #(#@(#((@(@@&amp;@@@@@#@@@( (((%@@#@(@%@@@@@@@@@@@&amp; /, , (((%%@@@@(@%@@@@@@@@@@ (#@@@@@, ((@@@@@@@@@@@@@@@@&amp;@&amp; @#@@@@@%&amp; (@%%&amp;&amp;&amp;@&amp;@@@@%&amp;@#&amp;( @@@@@@@@* .@&amp;%#@@@@@@@@@%%#&amp;(.(&amp;#@@@@@( Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are 2 Megumi Fushiguros standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * * @ @@*@@&amp;@@( @@@@@@@@@@@@@@@%/ @@@@@@@@&amp;@@@@@, /@@@@@@@/&amp;@@@@@@# @@ ., ...*#@ . ( (/ &amp;@@@@/ ., .*/ @@@@@@@@@ .@ @@@@@&amp;@@&amp;@@#@@@@ .@&amp;##%@%@@@@@@@@@ (&amp;%%%%&amp;@%&amp;@@@@&amp;@@@@ @%(##%@@@@@@@&amp;&amp;@@@@@ @%@@@@@@@&amp;#%%@@@@@@@ @%@&amp;@@@@@@@@%@@&amp;%@@@&amp; &amp;%%@@@@@@@@&amp;&amp;&amp;%@@@&amp;@@@ &amp;&amp;@##&amp;@@@@@@@@&amp;@@@&amp;@@@@ @@&amp;@@@@#@&amp;@@@@@@@@@#@@@ @@&amp;@@@&amp;@%@@@@@@@@@@&amp;%@@@ @@%%@@%@@%@@@@@@@%%@@&amp;*(@ &amp;@&amp;@&amp;%&amp;@* ,&amp;@@@@@&amp;&amp;@@( @@@&amp;@*. ,@@@@@@@@@ @@@@@@@@.. @@@@@@@ @@@@@@@@&amp;#. ..@@@@ Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There is 1 Megumi Fushiguro standing around... @@@@@@@ @@@@@@@@@/&amp; %@@@@(@@@@@@@@ &amp;@@@&amp;@@@@@@@% /@@**.,*.. * #@ @@&amp;., , /.( @@@@&amp;@&amp;, .*.@@, .,/ ,@****#@@@*%(/@@@@/, . #@@@@@@@@&amp;/(*/*%@@@%,,**, *@ @@@@@@@@@@@*(#**(@@@@@, @@@@@@@ @@@@/*(&amp;@@@*****@ @@@@. &amp;@&amp;@@@ ,/@@@@*@@#@@@@@%@ , (#(%@@@@*@@@@@@@ (&amp;@@@#%@@*@%**///((# / , * *(@@@@@@@@**@@@@@*/@*@ ./*.*. ,. ***@@@@@@@@@@@@@@@@@@@@ * /*@@@@@@@@@@@@&amp;@@ # .**@@%&amp;@%%@@@@@@@@ * *@@@@@@@@@&amp;@@@@@@% * ( @@@@@@@@@@@@@@@@ , * Here comes Toji Fushiguro who is a menace to society ,@&amp;@# @@@@@@@@@% @@@#@@&amp;&amp;@&amp; .#@((/((/( / ,@@@@#/(##( . /@@@@@@@@@@@@* @@@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@@@@@@( #@@@@@@@@@@@@@@@@@@@@@ @@@@@@@@@@@@@@@@@@@@@ &amp;@@@# @@@@@@@@@@@%%%#@ @@%%%% @@@@@@@@@@%&amp;&amp;%# #&amp;&amp;&amp;&amp;% %@@@@@@@@%&amp;%%&amp;#% &amp;&amp;&amp;&amp;. &amp;@@@@@@@@@@%&amp;&amp;%%% *&amp;#&amp;&amp;#%&amp;.%%#%#@@#&amp;&amp;&amp;&amp;&amp; %%%%#&amp;&amp;&amp;/&amp;&amp;%%%%&amp;* @@&amp;&amp; There are no more Megumi Fushiguros standing around 0000000000000000000000000000000000 THE END .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/15/Java-Iteration.html",
            "relUrl": "/jupyter/2022/09/15/Java-Iteration.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Gratitude Post",
            "content": "What I Am Grateful for: . To start off, I am grateful for all my loved ones. I am thankful for my family, who have provided me with so much support and love through tje ups and downs of my life. I truly believe that I would not have succeeded nearly as much if it was not for my family. In addition, my friends have supported me greatly and have helped my through rough times. Looking back at how much they have aided me makes me feel extremely appreciative for all of them. Moving forward into the future, I seek to maintain a close group of friends and preserve a good relationship with my relatives, for the sake my own mental health, as well as for me to give support back to my loved ones. .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/11/Gratitude.html",
            "relUrl": "/markdown/2022/09/11/Gratitude.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Title",
            "content": "Java If Else Statements . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Java If Else Statements&quot;); } } ifelse.main(null); . Java If Else Statements .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/09/08/ifelse.html",
            "relUrl": "/2022/09/08/ifelse.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Java Conditional Statements Post",
            "content": "Java if else statements are a type of conditional statement. If the Java if statement evaluates to true, it will perform a specific action designated to it. Otherwise, if it evaluates to false, it will perform another designated action. . import java.util.Scanner; import java.lang.Math; public class ifelse { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); if (schoolSubjectNew.equals(&quot;math&quot;)) { System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); } else if (schoolSubjectNew.equals(&quot;english&quot;)) { System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); } else if (schoolSubjectNew.equals(&quot;history&quot;)) { System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); } else if (schoolSubjectNew.equals(&quot;physical education&quot;)) { System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); } else if (schoolSubjectNew.equals(&quot;science&quot;)) { System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); } else if (schoolSubjectNew.equals(&quot;computer science&quot;)) { System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); } else { System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); } } } ifelse.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . import java.util.Scanner; import java.lang.Math; public class Switch { public static void main(String[] args) { System.out.println(&quot;Pick a school subject:&quot;); System.out.println(&quot;-&quot;); Scanner userInput = new Scanner(System.in); String schoolSubject = userInput.nextLine(); String schoolSubjectNew = schoolSubject.toLowerCase(); switch(schoolSubjectNew) { case &quot;math&quot;: System.out.println(&quot;Math Fact: The only factors of a prime number is 1 and itself.&quot;); break; case &quot;english&quot;: System.out.println(&quot;English Fact: An independent clause is a statement of words that contains at least 1 subject and 1 verb.&quot;); break; case &quot;history&quot;: System.out.println(&quot;History Fact: The 1st president of the United States of America was George Washington.&quot;); break; case &quot;physical education&quot;: System.out.println(&quot;Physical Education Fact: Soccer is the best sport in the world!&quot;); break; case &quot;science&quot;: System.out.println(&quot;Science Fact: The derivative of velocity is acceleration&quot;); break; case &quot;computer science&quot;: System.out.println(&quot;Computer Science Fact: An if else statement performs an action if the condition is met, and performs another action if the condition is not met.&quot;); break; default: System.out.println(&quot;The school subject you typed was not found...&quot;); System.out.println(&quot;Miscellaneous Fact: Zach Lavine is one of the best NBA basketball players&quot;); break; } } } Switch.main(null); . Pick a school subject: - Science Fact: The derivative of velocity is acceleration . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . import java.util.Scanner; import java.lang.Math; public class DeMorgan1 { public static void main(String[] args) { System.out.println(&quot;Type the length in minutes of your average work out:&quot;); System.out.println(&quot;--&quot;); Scanner userInput = new Scanner(System.in); int minutesNew = userInput.nextInt(); if (minutesNew &gt; 0 &amp;&amp; minutesNew &lt;= 60) { System.out.println(&quot;Your average work outs should be a little longer unless it is really intense&quot;); } else if (minutesNew &gt; 60 &amp;&amp; minutesNew &lt;= 120) { System.out.println(&quot;Your work outs are at perfect length&quot;); } else if (minutesNew &gt; 120 &amp;&amp; minutesNew &lt;= 210) { System.out.println(&quot;Your work outs are at an above average length&quot;); } else { System.out.println(&quot;You are a beast&quot;); } } } DeMorgan1.main(null); . Type the length in minutes of your average work out: -- You are a beast . import java.util.Scanner; import java.lang.Math; public class DeMorgan2 { public static void main(String[] args) { Scanner userInput = new Scanner(System.in); System.out.println(&quot;Enter your first integer:&quot;); System.out.println(&quot;-&quot;); int numberOne = userInput.nextInt(); System.out.println(&quot;Enter your second integer:&quot;); System.out.println(&quot;-&quot;); int numberTwo = userInput.nextInt(); boolean booleanValue1 = numberOne == numberTwo; System.out.println(&quot;Enter your third integer:&quot;); System.out.println(&quot;-&quot;); int numberThree = userInput.nextInt(); System.out.println(&quot;Enter your fourth integer:&quot;); System.out.println(&quot;-&quot;); int numberFour = userInput.nextInt(); boolean booleanValue2 = numberThree == numberFour; if (booleanValue1 || booleanValue2) { System.out.println(&quot;Or Statement: True&quot;); } else { System.out.println(&quot;Or Statement: False&quot;); } if (booleanValue1 &amp;&amp; booleanValue2){ System.out.println(&quot;And Statement: True&quot;); } else { System.out.println(&quot;And Statement: False&quot;); } if (!(booleanValue1 || booleanValue2)){ System.out.println(&quot;Nor Statement: True&quot;); } else { System.out.println(&quot;Nor Statement: False&quot;); } if (!(booleanValue1 &amp;&amp; booleanValue2)){ System.out.println(&quot;Nand Statement: True&quot;); } else { System.out.println(&quot;Nand Statement: False&quot;); } } } DeMorgan2.main(null); . Enter your first integer: - Enter your second integer: - Enter your third integer: - Enter your fourth integer: - Or Statement: True And Statement: True Nor Statement: False Nand Statement: False .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/09/08/Java-Conditional.html",
            "relUrl": "/jupyter/2022/09/08/Java-Conditional.html",
            "date": " • Sep 8, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Code.org Blog Post",
            "content": "Code.org Blog Post . Code.org with up to lesson 15 completed . . Code.org Key Learnings . In Java, an object can be created using the public objectName(){} command. | An object is an instance of a class, and it has its own identity, state, and purpose. The state of an object is stored in variables or fields, and it can be used using functions or methods. | In Java, the public class subclassName extends superclassName{} command links a subclass to a superclass. An example of subclassName could be soccer, while an example of superclassName could be sport. | A sub class that extends to a super class means that the sub class is inherited from the super class. | A Java constructor is a method used to initialize objects that does not have a return type (e.g. void). The constructor name must be the same as its class name counterpart. Every class has by default a constructor, and a constructor is called whenever an object is built. An example of a Java constructor code is public Main(){}. | .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/09/05/Codeorg.html",
            "relUrl": "/markdown/2022/09/05/Codeorg.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Week 1 - Java Objects Post",
            "content": "import java.util.Scanner; import java.lang.Math; public class Menu { public Menu() { Scanner sc = new Scanner(System.in); this.print(); boolean quit = false; while (!quit) { try { int choice = sc.nextInt(); System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); } catch (Exception e) { sc.nextLine(); System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } private void print() { System.out.println(&quot;- n&quot;); System.out.println(&quot;Java Menu&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - NBA Player Personality Quiz&quot;); System.out.println(&quot;2 - Which kinematics equation should I use?&quot;); System.out.println(&quot;3 - Print out digits of PI&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; Scanner typeInput = new Scanner(System.in); switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.println(&quot; nNBA Players Personality Test&quot;); int[] questionNumberList = {1, 2, 3, 4}; int count = 0; for (int a = 0; a &lt; questionNumberList.length; a++) { System.out.println(&quot;Question &quot; + questionNumberList[a]); if (questionNumberList[a] == 1) { System.out.println(&quot;What is your favorite basketball team?&quot;); System.out.println(&quot;A) Chicago Bulls&quot;); System.out.println(&quot;B) LA Lakers&quot;); System.out.println(&quot;C) Golden State Warriors&quot;); System.out.println(&quot;D) Oklahoma City Thunder&quot;); String userAnswer1 = typeInput.nextLine(); String userAnswer1Update = userAnswer1.toLowerCase(); if (userAnswer1Update.equals(&quot;a&quot;)) { count += + 1; } else if (userAnswer1Update.equals(&quot;b&quot;)) { count += + 2; } else if (userAnswer1Update.equals(&quot;c&quot;)) { count += + 3; } else if (userAnswer1Update.equals(&quot;d&quot;)) { count += 4; } } else if (questionNumberList[a] == 2) { System.out.println(&quot;What is your ideal height?&quot;); System.out.println(&quot;A) 7&#39;1&quot;); System.out.println(&quot;B) 6&#39;6&quot;); System.out.println(&quot;C) 6&#39;11&quot;); System.out.println(&quot;D) 6&#39;3&quot;); String userAnswer2 = typeInput.nextLine(); String userAnswer2Update = userAnswer2.toLowerCase(); if (userAnswer2Update.equals(&quot;a&quot;)) { count += 2; } else if (userAnswer2Update.equals(&quot;b&quot;)) { count += 1; } else if (userAnswer2Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer2Update.equals(&quot;d&quot;)) { count += 3; } } else if (questionNumberList[a] == 3) { System.out.println(&quot;What is your favorite basketball position?&quot;); System.out.println(&quot;A) Small Forward&quot;); System.out.println(&quot;B) Point Guard&quot;); System.out.println(&quot;C) Center&quot;); System.out.println(&quot;D) Shooting Guard&quot;); String userAnswer3 = typeInput.nextLine(); String userAnswer3Update = userAnswer3.toLowerCase(); if (userAnswer3Update.equals(&quot;a&quot;)) { count += 4; } else if (userAnswer3Update.equals(&quot;b&quot;)) { count += 3; } else if (userAnswer3Update.equals(&quot;c&quot;)) { count += 2; } else if (userAnswer3Update.equals(&quot;d&quot;)) { count += 1; } } else if (questionNumberList[a] == 4) { System.out.println(&quot;What is favorite basketball skill?&quot;); System.out.println(&quot;A) Shooting&quot;); System.out.println(&quot;B) Dunking&quot;); System.out.println(&quot;C) Dribbling&quot;); System.out.println(&quot;D) Defending&quot;); String userAnswer4 = typeInput.nextLine(); String userAnswer4Update = userAnswer4.toLowerCase(); if (userAnswer4Update.equals(&quot;a&quot;)) { count += 3; } else if (userAnswer4Update.equals(&quot;b&quot;)) { count += 2; } else if (userAnswer4Update.equals(&quot;c&quot;)) { count += 4; } else if (userAnswer4Update.equals(&quot;d&quot;)) { count += 1; } } } System.out.println(&quot;You have completed the NBA personality quiz!&quot;); if (count &gt;= 13) { System.out.println(&quot;You are Kevin Durant!&quot;); } else if (count &gt; 10) { System.out.println(&quot;You are Stephen Curry!&quot;); } else if (count &gt; 7) { System.out.println(&quot;You are Shaq O&#39; Neal!&quot;); } else if (count &gt;= 4) { System.out.println(&quot;You are Michael Jordan!&quot;); } break; case 2: System.out.println(&quot;What is the information you need to find?&quot;); String kinematicsInput1 = typeInput.nextLine(); String kinematicsInput1LowerCase = kinematicsInput1.toLowerCase(); String kinematicsEquation1 = &quot;Vf = Vi + a * t&quot;; String kinematicsEquation2 = &quot;x = Vi * t + (a * t^2)/2&quot;; String kinematicsEquation3 = &quot;Vf^2 = Vi^2 + 2 * a * x&quot;; String kinematicsEquation4 = &quot;x = (Vi + Vf)/2 * t&quot;; String kinematicsEquation5 = &quot;x = Vf * t - (a * t^2)/2&quot;; if (kinematicsInput1LowerCase.equals(&quot;displacement&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation1); } else if (kinematicsInput1LowerCase.equals(&quot;final velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation2); } else if (kinematicsInput1LowerCase.equals(&quot;time&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation3); } else if (kinematicsInput1LowerCase.equals(&quot;acceleration&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation4); } else if (kinematicsInput1LowerCase.equals(&quot;initial velocity&quot;)) { System.out.println(&quot;The kinematics equation you need is: &quot; + kinematicsEquation5); } break; case 3: Scanner piInput = new Scanner(System.in); System.out.println(&quot;How many digits of Pi do you want to print out?&quot;); int piDigits = piInput.nextInt(); int[] piArray = new int[]{3,1,4,1,5,9,2,6,5,3,5,8,9,7,9,3,2,3,8,4,6,2,6,4,3,3,8,3,2,7,9,5,0,2,8,8,4,1,9,7,1,6,9,3,9,9,3,7,5,1,0,5,8,2,0,9,7,4,9,4,4,5,9,2,3,0,7,8,1,6,4,0,6,2,8,6,2,0,8,9,9,8,6,2,8,0,3,4,8,2,5,3,4,2,1,1,7,0,6,7,9}; String piPrint = &quot;&quot;; for (int i = 0; i &lt; piDigits; i++) { if (piDigits &gt; 1 &amp;&amp; i == 0) { piPrint += piArray[i] + &quot;.&quot;; } else { piPrint += piArray[i]; } } System.out.println(piPrint); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } return quit; } // Static driver/tester method static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Java Menu - 1 - NBA Player Personality Quiz 2 - Which kinematics equation should I use? 3 - Print out digits of PI 0 - Quit - 1: NBA Players Personality Test Question 1 What is your favorite basketball team? A) Chicago Bulls B) LA Lakers C) Golden State Warriors D) Oklahoma City Thunder Question 2 What is your ideal height? A) 7&#39;1 B) 6&#39;6 C) 6&#39;11 D) 6&#39;3 Question 3 What is your favorite basketball position? A) Small Forward B) Point Guard C) Center D) Shooting Guard Question 4 What is favorite basketball skill? A) Shooting B) Dunking C) Dribbling D) Defending You have completed the NBA personality quiz! You are Shaq O&#39; Neal! 0: Goodbye, World! .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/31/GUI-menu.html",
            "relUrl": "/jupyter/2022/08/31/GUI-menu.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Collegeboard Topics",
            "content": "Home . AP Computer Science Principles A College Board Topics . . Unit 1: Primitive Types . . In Java, there are primitive and non-primitive data types. Some primitive data types include int, double and boolean, and some non-primitive data types include String and array. . Data Types: . int: Used for all integers. | double: Used for numbers with decimals. | boolean: Used for all boolean values, which are usually two return values that typically vary between true or false. | String: Used for all text values. | Java Input: . &quot;static&quot; or &quot;hard coded&quot; programs typically when all of the website information is displayed by default. There are no instances of user input in these types of programs. . To increase user interaction, having user inputs is important . In Java, Scanner is the utility class used for console user input . All programming has the means of formatting and combining data. An example of this is shown through concatenation (e.g. &quot;Hello,&quot; + &quot; World!&quot; = &quot;Hello, World!&quot;. The &quot;+&quot; symbol combined the two strings). . Unit 2: Using Objects . . The relationship between a class and an object is that a class is essentially a template for an object, and an object is an instance of a class. . Other College Board Topics related to this unit: . A 2D array can be used to store colors. | A control structure can be used to process menu selections. A switch can be used to run code that performs the related action of a selection. | A 1D array can be used to hold a menu. | A control structure such as if-else if-else can be used to process menu selections by running code that performs the related action of a selection. | Class inheritance. | Conditional statements, while loops, and boolean expressions. | Some Java imports are designated toward allowing user input and console output in the terminal. . The Scanner class makes an object to collect inputs / menu selections from users . The System class can be used to call static methods like System.out.print() and System.out.println() to output in the console. . The Math class can be used to call the static method Math.random() to generate a random number within a specified range. . Objects are often intended to encapsulate Frontend, Backend, Web Site control flow, Database CRUD Operations, and many more. . With Swing and AWT imports, Java has the ability to provide a Graphical User Interface (GUI) on the desktop. . Unit 3: Boolean Expressions and If Statements . . Conditional Statements: . A Boolean expression is a logical statement that can evaluate to only two values, which are usually true or false. . A Boolean expression may comprise of a combination of Boolean constants true or false. . An if else statement is a type of conditional statement that performs a specific action if it evaluates to true, and performs another specific action if it evaluates to false . An if else code block can involve the if(), else if(), and else statements. . A switch statement is similar to an if else statement, as it has an initial controlling expression and has a specific action designated for each case value, in which if the controlling expression matches the conditions of a case, the action for that case will be performed. . De Morgan&#39;s Law: . The De Morgan&#39;s Law basically uses the logical operators or, and, nor, and nand. For two conditions paired with an ||(or) operator, the program will evaluate to true if at least one of the conditions evaluates to true. For two conditions paired with an &amp;&amp;(and) operator, the program will only evaluate to true only if both of the conditions evaluate to true. For two conditions paired with a !(not) operator, the program is reversed, as it will print true if the condition evaluates to false, and print false if the condition evaluates to true. . Unit 4: Iteration . . Iteration can include creating a loop to perform an action until a specified condition(s) is/are met. . Iteration can be used in standard arithmetic-based and String algorithms. . for and while loops are used in code to represent iterative processes. . Nesting loop and iteration statements basically involve having a loop integrated inside another loop. For example, consider an outside for loop that repeats 3 times and an inside for loop that repeats 7 times. For each iteration in the outside for loop, the inside for loop will iterate 7 times. This will result in the program iterating a total of 21 times. . A recursion loop, like the while loop and for loop, repeats itself over and over again until a certain condition is met. The uniqueness of recursion loops come from the fact that they involve a function calling itself to repeat a task. . Unit 5: Writing Classes . . The anatomy of an object typically consists of state, attributes, and behavior. An object is practically an instance of a class. . A class defines an abstract data type. Object references can be done with String variables, while instance variables contain attributes, behaviors, and data for objects. . Methods are behaviors or actions that can be done with objects, and constructors create the object itself. . The main method tests a class and contains instance variables which include attributes, fields, and properties. . Constructors are a special method for object instantiation in that is sets initial values for variables and can run methods. . A default constructor has no arguments and is used when no constructor is defined. A class can have multiple constructors. . Unit 6: Array . . In Java, arrays and ArrayLists are different data structures. . Java arrays can have primitive (e.g. int, char, float) or referenced (e.g. String, Array, classes) data types. . int[] array = new int[10]; creates an array with 10 elements with type into and value 0. . int[] array2 = {10, 9, 8, 7, 6}; is an example way of initializing an array. . Unit 7: ArrayList . . Unit 8: 2D Array . . Unit 9: Inheritance . . Unit 10: Recursion . . .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/2022/08/27/collegeboard-topics.html",
            "relUrl": "/2022/08/27/collegeboard-topics.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Week 1 - Java Primitives Post",
            "content": "Java Primitives . import java.util.Scanner; public class primitives { public static void main(String[] args) { // int is for integers int x = 7; System.out.println(x); // double is for numbers with decimals double pi = 3.14159265358979; System.out.println(pi); // boolean has two return values, which are usually true and false boolean y = true; System.out.println(y); // String is for text values String z = &quot;Hello, World!&quot;; System.out.println(z); for (int a = 0; a &lt; 5; a++) { Scanner userInput1 = new Scanner(System.in); System.out.println(&quot;Type your first integer:&quot;); int first = userInput1.nextInt(); System.out.println(&quot;Type your second integer:&quot;); int second = userInput1.nextInt(); Scanner userInput2 = new Scanner(System.in); System.out.println(&quot;Type the desired mathematical operator:&quot;); String operator = userInput2.nextLine(); String operatorNew = operator.toLowerCase(); if (operatorNew.equals(&quot;addition&quot;)) { int sum = first + second; System.out.println(first + &quot; plus &quot; + second + &quot; equals &quot; + sum); } else if (operatorNew.equals(&quot;subtraction&quot;)) { int difference = first - second; System.out.println(first + &quot; subtracted by &quot; + second + &quot; equals &quot; + difference); } else if (operatorNew.equals(&quot;multiplication&quot;)) { int product = first * second; System.out.println(first + &quot; multiplied by &quot; + second + &quot; equals &quot; + product); } else if (operatorNew.equals(&quot;division&quot;)) { double quotient = (double) first / (double) second; System.out.println(first + &quot; divided by &quot; + second + &quot; equals &quot; + quotient); } else if (operatorNew.equals(&quot;modulation&quot;)) { int modResult = first % second; System.out.println(first + &quot; modulus &quot; + second + &quot; equals &quot; + modResult); } } } } primitives.main(null); . 7 3.14159265358979 true Hello, World! Type your first integer: Type your second integer: Type the desired mathematical operator: 7 plus 8 equals 15 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 subtracted by 1 equals 10 Type your first integer: Type your second integer: Type the desired mathematical operator: 7 multiplied by 7 equals 49 Type your first integer: Type your second integer: Type the desired mathematical operator: 121 divided by 11 equals 11.0 Type your first integer: Type your second integer: Type the desired mathematical operator: 11 modulus 5 equals 1 . Java Compound Operators . public class javaCompound { public static void main(String[] args) { // Initial Values int x = 7; int y = 8; double a = 3.14; double b = 6.28; // The compound operators modify values x += 7; y += 8; a *= 2; b /= 2; System.out.println(x); System.out.println(y); System.out.println(a); System.out.println(b); } } javaCompound.main(null); . 14 16 6.28 3.14 . GPA Calculator . import java.util.Scanner; public class GPACalculator { public static void main(String[] args) { System.out.println(&quot;Trimester GPA Calculator&quot;); Scanner userInput = new Scanner(System.in); int sum = 0; System.out.println(&quot;Enter the number of classes this trimester or the most recent trimester with final grades:&quot;); int classes = userInput.nextInt(); System.out.println(classes + &quot; classes&quot;); System.out.println(&quot;Enter Class Grades:&quot;); for (int i = 0; i &lt;= classes; i++) { int gpa = 0; String grade = userInput.nextLine(); System.out.println(grade); if (grade.equals(&quot;A&quot;)) { gpa = 4; } else if (grade.equals(&quot;B&quot;)) { gpa = 3; } else if (grade.equals(&quot;C&quot;)) { gpa = 2; } else if (grade.equals(&quot;D&quot;)) { gpa = 1; } else if (grade.equals(&quot;F&quot;)) { gpa = 0; } sum = sum + gpa; } float gpaWhole = (float) sum/(float) classes; System.out.println(&quot;Your Overall GPA: &quot; + gpaWhole); } } GPACalculator.main(null); . Trimester GPA Calculator Enter the number of classes this trimester or the most recent trimester with final grades: 8 classes Enter Class Grades: A A B A A B A A Your Overall GPA: 3.75 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/27/Java-Primitives.html",
            "relUrl": "/jupyter/2022/08/27/Java-Primitives.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Week 1 - Bash Post",
            "content": "python --version java --version javac --version conda --version npm --version . Python 3.9.12 openjdk 11.0.16 2022-07-19 OpenJDK Runtime Environment (build 11.0.16+8-post-Ubuntu-0ubuntu120.04) OpenJDK 64-Bit Server VM (build 11.0.16+8-post-Ubuntu-0ubuntu120.04, mixed mode, sharing) javac 11.0.16 conda 4.13.0 3.10.10 . jupyter kernelspec list . Available kernels: bash /home/dylanluo05/.local/share/jupyter/kernels/bash java /home/dylanluo05/.local/share/jupyter/kernels/java javascript /home/dylanluo05/.local/share/jupyter/kernels/javascript python3 /home/dylanluo05/.local/share/jupyter/kernels/python3 . conda list | grep &quot;jupyter&quot; . jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . conda list . # packages in environment at /home/dylanluo05/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/26/My-First-Bash.html",
            "relUrl": "/jupyter/2022/08/26/My-First-Bash.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "My First Python Post",
            "content": "first = &quot;Hello World!&quot; print(first) . Hello World! . Jupyter Notebook seems to be working fine for Python . second = &quot;Hey, I&#39;m Dylan&quot; print(second) . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Python.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Python.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "My First Markdown Post",
            "content": "AP CSA First Markdown Post . Hey my name is Dylan Luo, and I am ready to take on the AP CSA class and its very many challenges! . Example Code Embed . &lt;h1 id = &quot;a&quot;&gt;&lt;/h1&gt; var A = document.getElementById(&quot;a&quot;); A.innerHTML = &quot;Hello World!&quot; .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2022/08/21/My-First-Markdown-Post.html",
            "relUrl": "/markdown/2022/08/21/My-First-Markdown-Post.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "My First Java Post",
            "content": "String first = &quot;Hello World!&quot;; System.out.println(first); . Hello World! . Jupyter Notebook seems to be working fine for Java . String second = &quot;Hey, I&#39;m Dylan&quot;; System.out.println(second); . Hey, I&#39;m Dylan .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2022/08/21/My-First-Java.html",
            "relUrl": "/jupyter/2022/08/21/My-First-Java.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://dylanluo05.github.io/DylanLuoAPCSA/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "JavaScript Soccer RapidAPI",
          "content": ". ID Country Team Name . . . . . . . . . . .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/FirstRapidAPI/",
          "relUrl": "/FirstRapidAPI/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "JavaScript Local Storage Login System",
          "content": ". . Sign In . . Username Password Sign Up . . Username Password Confirm Password .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/MyFirstJavaScript/",
          "relUrl": "/MyFirstJavaScript/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "Vocab",
          "content": "AP CSA Vocab Terms: .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/vocab/",
          "relUrl": "/vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dylanluo05.github.io/DylanLuoAPCSA/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}